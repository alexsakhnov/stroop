{"version":3,"sources":["Game.tsx","ColorLabel.tsx","TypeLabel.tsx","Timer.tsx","ColorButton.tsx","Color.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QUESTION_TYPE","Label","styled","div","_templateObject","Object","taggedTemplateLiteral","ColorLabel","_ref","color","label","react_default","a","createElement","style","TypeLabel_templateObject","TypeLabel","TypeLabel_Label","Timer_templateObject","Timer","secondsLeft","Timer_Label","Button","button","ColorButton_templateObject","rippleAnimation","keyframes","_templateObject2","Riplle","span","_templateObject3","ColorButton","onClick","_useState","useState","_useState2","slicedToArray","className","backgroundColor","event","currentTarget","diameter","Math","max","clientWidth","clientHeight","radius","ripple","querySelector","height","concat","width","left","clientX","offsetLeft","top","clientY","offsetTop","animationName","requestAnimationFrame","setTimeout","Colors","value","RetryButton","Game_templateObject","StyledScore","Game_templateObject2","StyledGame","Game_templateObject3","ButtonRow","_templateObject4","generateQuestion","length","floor","random","colorType","LABEL","VALUE","answer","Game","duration","timeLeft","Date","getTime","localStorage","getItem","parseInt","loadBestScore","bestScore","setBestScore","_useState3","_useState4","gameOn","setGameOn","_useState5","_useState6","endTime","setEndTime","_useState7","_useState8","setSecondsLeft","_useState9","_useState10","serie","setSerie","_useState11","_useState12","score","setScore","_useState13","_useState14","maxSerie","setMaxSerie","_useState15","_useState16","question","setQuestion","useEffect","interval","setInterval","clearInterval","confetti","particleCount","spread","origin","y","setItem","toString","src_Timer","Fragment","src_TypeLabel","src_ColorLabel","map","index","src_ColorButton","key","console","log","window","navigator","vibrate","FontStyles","createGlobalStyle","App_templateObject","StyledApp","App_templateObject2","App","src_Game","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1d4e7226.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport ColorLabel from './ColorLabel';\nimport TypeLabel from './TypeLabel';\nimport Timer from './Timer';\nimport ColorButton from './ColorButton';\nimport { Colors, Color } from './Color';\nimport styled from 'styled-components';\nimport confetti from 'canvas-confetti';\n\nconst RetryButton = styled.button`\n    margin: 0 auto 20px;\n    padding: 1em;\n    width: 50%;\n`\n\nconst StyledScore = styled.div`\n    background: #000;\n    align-self: center;\n    padding: 0.2em 0.8em;\n    border-radius: 0.5em;\n`;\n\nconst StyledGame = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    min-height: 100vh;\n    padding: 40px 20px;\n    box-sizing: border-box;\n`;\n\nconst ButtonRow = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-evenly;\n    margin: 50px 20px;\n`;\n\ntype GameProps = {\n    duration: number;\n};\n\nenum QUESTION_TYPE {\n    VALUE = 'цвет',\n    LABEL = 'значение',\n}\n\ntype Question = {\n    colorType: QUESTION_TYPE;\n    value: string;\n    label: string;\n    answer: string;\n};\n\nfunction generateQuestion(): Question {\n    const max = Colors.length;\n    const color = Math.floor(Math.random() *max);\n    const label = Math.floor(Math.random() *max);\n    const colorType = Math.random() > 0.5 ? QUESTION_TYPE.LABEL : QUESTION_TYPE.VALUE;\n    return {\n        colorType: colorType,\n        value: Colors[color].value,\n        label: Colors[label].label,\n        answer: colorType === QUESTION_TYPE.VALUE ? Colors[color].value : Colors[label].value\n    }\n}\n\nconst Game = ({duration}: GameProps) => {\n    const loadBestScore = (): number => {\n        const value = localStorage.getItem('bestScore');\n        return parseInt(value || '0');\n    };\n    const saveBestScore = (value: number) => localStorage.setItem('bestScore', value.toString());\n\n    const timeLeft = (value: number) => Math.floor((value - (new Date).getTime()) / 1000);\n    const [bestScore, setBestScore] = useState(loadBestScore());\n    const [gameOn, setGameOn] = useState(true);\n    const [endTime, setEndTime] = useState((new Date).getTime() + duration * 1000);\n    const [secondsLeft, setSecondsLeft] = useState(timeLeft(endTime));\n    const [serie, setSerie] = useState(0);\n    const [score, setScore] = useState(0);\n    const [maxSerie, setMaxSerie] = useState(0);\n    const [question, setQuestion] = useState(generateQuestion());\n\n    useEffect(() => {\n        if (gameOn) {\n            setSecondsLeft(timeLeft(endTime));\n            const interval = setInterval(() => {\n            let secondsLeft = timeLeft(endTime);\n            setSecondsLeft(secondsLeft);\n            if (secondsLeft <= 0) {\n                setGameOn(false);\n            }\n        }, 500);\n\n        return () => clearInterval(interval);\n        } else {\n            if (score >= bestScore) {\n                confetti({\n                    particleCount: 100,\n                    spread: 70,\n                    origin: { y: 0.6 }\n                  });\n                saveBestScore(score);\n                setBestScore(score);\n            }\n        }\n        \n    }, [gameOn]);\n\n    if (!gameOn) {\n        return <StyledGame>\n            <div>\n        <RetryButton onClick={() => {\n            setEndTime((new Date).getTime() + duration * 1000);\n            setSerie(0);\n            setMaxSerie(0);\n            setScore(0);\n            setGameOn(true);\n        }}>Ещё раз</RetryButton>\n        <div>Game Over</div>\n        <div>Твой результат {score}</div>\n        <div>Максимальная серия {maxSerie}</div>\n        <div>Лучший результат {bestScore}</div>\n        </div>\n        </StyledGame>\n    }\n\n  return (\n    <StyledGame>\n        <StyledScore>Score: {score}</StyledScore>\n        <Timer secondsLeft={secondsLeft}/>\n\n        <div>\n        {question \n            ? <>\n                <TypeLabel label={question.colorType}/>\n                <ColorLabel color={question.value} label={question.label}/>\n                </> \n            : null}\n        </div>\n         <ButtonRow>\n            {Colors.map((color: Color, index) => <ColorButton key={index} color={color.value} \n            onClick={() => {\n                console.log('click', color, question.answer);\n                if (question.answer === color.value) {\n                    setSerie(serie + 1)\n                    setScore(score + (serie + 1) * 60);\n                    setMaxSerie(Math.max(maxSerie, serie + 1));\n                } else {\n                    setSerie(0);\n                    window.navigator.vibrate(200);\n                }\n                \n                setQuestion(generateQuestion());\n            }}/>)}\n        </ButtonRow>\n    </StyledGame>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport styled from 'styled-components'\n\ntype ColorLabelProps = {\n    color: string;\n    label: string;\n};\n\nconst Label = styled.div`\n    font-size: 2.8em;\n`;\n  \nconst ColorLabel = ({color, label}: ColorLabelProps) => <Label style={{color: color}}>{label}</Label>\n\nexport default ColorLabel","import React from 'react';\nimport styled from 'styled-components'\n\ntype TypeLabelProps = {\n    label: string;\n  };\n  \n  const Label = styled.div`\n    font-size: 3em;\n`;\n\nconst TypeLabel = ({label}: TypeLabelProps) => <Label>{label}</Label>\n\nexport default TypeLabel","import React from 'react';\nimport styled from 'styled-components'\n\ntype TimerProps = {\n    secondsLeft: number;\n};\n\nconst Label = styled.div`\n    font-size: 3em;\n`;\n  \nconst Timer = ({secondsLeft}: TimerProps) => {\n    return <Label>{secondsLeft}</Label>\n}\n\nexport default Timer","import React, { DOMElement, useState } from 'react';\nimport styled, {keyframes} from 'styled-components';\n\nconst Button = styled.button`\n    width: 30%;\n    height: 100px;\n    border-radius: 30px;\n    border: none;\n    margin-bottom: 3%;\n    position: relative;\n    overflow: hidden;\n    transition: background 400ms;\n`;\n\nconst rippleAnimation = keyframes`\nto {\n    transform: scale(4);\n    opacity: 0;\n  }\n`\n\nconst Riplle = styled.span`\n    position: absolute; /* The absolute position we mentioned earlier */\n    border-radius: 50%;\n    transform: scale(0);\n    animation: ${rippleAnimation} 600ms ease;\n    background-color: rgba(255, 255, 255, 0.7);\n`;\n\ntype ColorButtonProps = {\n    color: string;\n    onClick: () => void;\n};\n  \nconst ColorButton = ({color, onClick}: ColorButtonProps) => {\n    const [ripples, setRipples] = useState<any>([]);\n    function clickHandler(event: React.MouseEvent<HTMLButtonElement>): void {\n        const button = event.currentTarget;\n\n        const diameter = Math.max(button.clientWidth, button.clientHeight);\n        const radius = diameter / 2;\n\n        const ripple = button.querySelector('span');\n        if (ripple) {\n            ripple.style.height = `${diameter}px`;\n            ripple.style.width =  `${diameter}px`;\n            ripple.style.left =  `${event.clientX - button.offsetLeft - radius}px`;\n            ripple.style.top =  `${event.clientY - button.offsetTop - radius}px`;\n            ripple.style.animationName = 'none';\n            requestAnimationFrame(() => {setTimeout(() => {ripple.style.animationName = ''}, 0)})\n        }\n        onClick();\n    }\n    return <Button className='ColorButton' style={{backgroundColor: color}} onClick={clickHandler}>\n        <Riplle style={{animationName: 'none'}}/>\n    </Button>\n}\n\n\nexport default ColorButton","export type Color = {\n    value: string;\n    label: string;\n};\n\nexport const Colors = [\n    {value: '#a1f1ff', label: 'голубой'},\n    {value: '#f8f47f', label: 'жёлтый'},\n    {value: '#8940c1', label: 'фиолетовый'},\n    {value: '#ed5151', label: 'красный'},\n    {value: '#91d453', label: 'зелёный'},\n    {value: '#4476e8', label: 'синий'},\n];","import React from 'react';\nimport ColorLabel from './ColorLabel';\nimport TypeLabel from './TypeLabel';\nimport Timer from './Timer';\nimport Game from './Game';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst FontStyles = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');\n`;\n\nconst StyledApp = styled.div`\n  font-family: 'Montserrat', sans-serif;\n\n  max-width: 500px;\n  text-align: center;\n  margin: auto;\n\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  // align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nfunction App() {\n  return (\n    <StyledApp className=\"App\">\n        <FontStyles/>\n        <Game duration={45}/>\n    </StyledApp>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}